Go语言入门分享

阮从勇
ruancongyong@gmail.com


* 主要内容

- Go 是什么，谁在使用 Go？
- 比较 Go 和 Java
- 代码示例
- 并发
- 工具


* Go 是什么？

Go 是开源的编程语言，可以很简单的构建简单，可靠和高效的软件

Go 是为大型代码基础库而设计的语言

互联网的 `C` 语言 

: 简洁、快速、安全
: 并行、有趣、开源
: 内存管理、数组安全、编译迅速

* 为什么有 Go？

解决 Google 规模的一个解决方案

规划的规模为 10⁶⁺ 台机器
每天在几千台机器上作业
在系统中与其他作业进行协作，交互
同一时间进行大量工作
—_解决方案：对并发的支持非常强大_—


* 谁在使用Go

.html example/enterprise.html

: Google 安卓的下载器, SPDY
: Facebook也在用，为此他们还专门在Github上建立了一个开源组织facebookgo，大家可以通过https://github.com/facebookgo访问查看facebook开源的项目，比如著名的是平滑升级的grace。
: 还有腾讯，七牛，斗鱼等等公司
: 京东云消息推送系统、云存储，以及京东商城等都有使用Go做开发

* 比较 Go 和 Java

Go 和 Java 有很多共同之处

- C 系列 (强类型，括号)
- 静态类型
- 垃圾收集
- 内存安全 (nil 引用，运行时边界检查)
- 变量总是初始化 (zero/nil/false)
- 方法
- 接口
- 类型断言
- 反射

: 
: GC
: 变量总是初始化为零值 false, 0, "", nil
: 

* 比较 Go 和 Java

Go 与 Java 的不同之处

- 代码程序直接编译成机器码，没有 VM
- 静态链接二进制
- 内存布局控制
- 函数值和词法闭包
- 内置字符串 (UTF-8)
- 内置泛型映射和数组/片段
- 内置并发
- 有指针有引用

: 多返回值
: 调整结构体内字段顺序, 占用内存不一样
: 不仅有方法, 还有函数, 闭包
: 切片是引用, 不需要额外内存, 比使用数组更有效率


* 比较 Go 和 Java

Go 特意去掉了大量的特性

- 没有类
- 没有构造器
- 没有继承
- 没有 final
- 没有异常
- 没有注解
- 没有自定义泛型

: 用error返回或者panic
: 泛型草案已提出, 大概在Go 2中支持; Java是伪泛型, 编译期间会擦除

* 示例

内存布局控制

.play -edit example/sizeof.go /^func main/,/^}/ 

同样字段, 调整布局, 占用内存不一样

: 节省内存

* 示例

抛弃继承, 使用组合

.play -edit example/extends.go /START OMIT/,/END OMIT/ 

: 使用内嵌方式
: Go 不是一种典型的OO语言，它在语法上不支持类和继承的概念。
: 一样可以实现多态

* 示例

并发的基石- *groutinue* 和 *channel*

.play -edit example/concurrent.go /START OMIT/,/END OMIT/

: 利用下标切片
: go 关键字就可以起一个协程, 并发简单

* 示例

内置web服务

.play -edit example/websrv.go /START OMIT/,/END OMIT/

: 几行代码就可以起一个web服务
: 

* 示例

函数和闭包

.play -edit example/closure.go /START OMIT/,/END OMIT/

: 函数可以保存到变量
: 延迟调用
: 缩小变量作用域，减少对全局变量的污染

* 示例

隐式实现接口

.code -edit example/hidden_interface.go /START OMIT/,/END OMIT/

: 非侵入式
: 不用在写类型的时候先想怎么设计接口的问题，直接把需要提供的方法全写了就成。至于哪个方法是哪个接口的，不用太操心。
: golang中关于接口的概念很似有点像C++中的Concept
: 其一， Go语言的标准库，再也不需要绘制类库的继承树图。你一定见过不少Java类库的继承树图。 在Go中，类的继承树并无意义，你只需要知道这个类实现了哪些方法，每个方法是啥含义就足够了。 
: 其二，实现类的时候，只需要关心自己应该提供哪些方法，不用再纠结接口需要拆得多细才合理。接口由使用方按需定义，而不用事前规划。 
: 其三，不用为了实现一个接口而导入一个包，因为多引用一个外部的包，就意味着更多的耦合。接口由使用方按自身需求来定义，使用方无需关心是否有其他模块定义过类似的接口。
: 隐式实现及实现条件
: 怎么实现接口：
: 实现接口的类并不需要显式声明，只需要实现接口所有的函数就表示实现了该接口，而且类还可以拥有自己的方法。

: 接口能被哪些类型实现：
: 接口可以被结构体实现，也可以被函数类型实现。
: 接口被实现的条件：
: 接口被实现的条件一：接口的方法与实现接口的类型方法格式一致（方法名、参数类型、返回值类型一致）。
: 接口被实现的条件二：接口中所有方法均被实现。

* 示例

静态链接

.code -edit example/hello.txt /START OMIT/,/END OMIT/

: 通过otool输出，我们可以看到hellogo并不依赖任何外部库，我们将hellog这个二进制文件copy到任何一个mac amd64的平台上，均可以运行起来。而helloc则依赖外部的动态库:/usr/lib/libSystem.B.dylib

* 示例

多返回值和异常处理

.code -edit example/hello.txt /START OMIT/,/END OMIT/

: 通过otool输出，我们可以看到hellogo并不依赖任何外部库，我们将hellog这个二进制文件copy到任何一个mac amd64的平台上，均可以运行起来。而helloc则依赖外部的动态库:/usr/lib/libSystem.B.dylib


* 大数据

.link https://github.com/goplus/gop
