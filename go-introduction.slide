Go语言入门分享

阮从勇
ruancongyong@gmail.com


* 主要内容

- Go 是什么，谁在使用 Go？
- 比较 Go 和 Java
- 代码示例
- 并发
- 工具


* Go 是什么？

Go 是开源的编程语言，可以很简单的构建简单，可靠和高效的软件

Go 是为大型代码基础库而设计的语言

互联网的 `C` 语言 

: 简洁、快速、安全
: 并行、有趣、开源
: 内存管理、数组安全、编译迅速

* 为什么有 Go？

解决 Google 规模的一个解决方案

规划的规模为 10⁶⁺ 台机器
每天在几千台机器上作业
在系统中与其他作业进行协作，交互
同一时间进行大量工作
—_解决方案：对并发的支持非常强大_—


* 谁在使用Go

.image images/google.png _ 75
.image images/k8s.png _ 75 
.image images/docker.png _ 75 
.image images/etcd.png _ 75 
.image images/alibaba.png _ 75
.image images/didi.png _ 75
.image images/wps.png _ 75

: Google 安卓的下载器, SPDY
: 还有腾讯，七牛，斗鱼等等公司

* 比较 Go 和 Java

Go 和 Java 有很多共同之处

- C 系列 (强类型，括号)
- 静态类型
- 垃圾收集
- 内存安全 (nil 引用，运行时边界检查)
- 变量总是初始化 (zero/nil/false)
- 方法
- 接口
- 类型断言 (实例)
- 反射

: 
: GC
: 变量总是初始化为零值 false, 0, "", nil
: 

* 比较 Go 和 Java

Go 与 Java 的不同之处

- 代码程序直接编译成机器码，没有 VM
- 静态链接二进制
- 内存布局控制
- 函数值和词法闭包
- 内置字符串 (UTF-8)
- 内置泛型映射和数组/片段
- 内置并发
- 有指针有引用

: 多返回值
: 调整结构体内字段顺序, 占用内存不一样
: 不仅有方法, 还有函数, 闭包
: 切片是引用, 不需要额外内存, 比使用数组更有效率


* 比较 Go 和 Java

Go 特意去掉了大量的特性

- 没有类
- 没有构造器
- 没有继承
- 没有 final
- 没有异常
- 没有注解
- 没有自定义泛型

: 用error返回或者panic
: 泛型草案已提出, 大概在Go 2中支持; Java是伪泛型, 编译期间会擦除

* 示例

内存布局控制

.play -edit example/sizeof.go /^func main/,/^}/

: 节省内存

* 示例

抛弃继承, 使用组合

.play -edit example/extends.go /START OMIT/,/END OMIT/

: 使用内嵌方式
: Go 不是一种典型的OO语言，它在语法上不支持类和继承的概念。
: 一样可以实现多态

* 示例

并发的基石- *groutinue* 和 *channel*

.play -edit example/concurrent.go /START OMIT/,/END OMIT/

: 利用下标切片
: go 关键字就可以起一个协程, 并发简单

* 示例

内置web服务

.play -edit example/websrv.go /START OMIT/,/END OMIT/

: 利用下标切片
: go 关键字就可以起一个协程, 并发简单

* 示例

函数和闭包

.play -edit example/closure.go /START OMIT/,/END OMIT/

: 函数可以保存到变量
: 延迟调用
: 缩小变量作用域，减少对全局变量的污染
